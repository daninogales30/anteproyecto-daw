# Generated by Django 5.1.7 on 2025-03-30 12:09

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('diets', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='Fecha de nacimiento')),
                ('gender', models.CharField(blank=True, choices=[('M', 'Masculino'), ('F', 'Femenino'), ('O', 'Otro')], max_length=1, verbose_name='Género')),
                ('weight', models.FloatField(default=70.0, help_text='Peso en kilogramos', verbose_name='Peso (kg)')),
                ('height', models.FloatField(default=170.0, help_text='Altura en centímetros', verbose_name='Altura (cm)')),
                ('body_fat_percentage', models.FloatField(blank=True, help_text='Ej: 15.5 (opcional)', null=True, verbose_name='Porcentaje de grasa corporal')),
                ('fitness_goal', models.CharField(choices=[('lose_weight', 'Perder peso'), ('gain_muscle', 'Ganar músculo'), ('maintain', 'Mantenimiento'), ('improve_endurance', 'Mejorar resistencia')], default='maintain', max_length=20, verbose_name='Objetivo principal')),
                ('activity_level', models.CharField(choices=[('sedentary', 'Sedentario'), ('light', 'Ligero (ejercicio 1-3 días/semana)'), ('moderate', 'Moderado (3-5 días/semana)'), ('active', 'Activo (6-7 días/semana)')], default='moderate', max_length=10, verbose_name='Nivel de actividad')),
                ('allergies', models.TextField(blank=True, verbose_name='Alergias alimenticias')),
                ('medical_conditions', models.TextField(blank=True, verbose_name='Condiciones médicas')),
                ('target_weight', models.FloatField(blank=True, null=True, verbose_name='Peso objetivo (kg) (Dejar en blanco si tu objetivo es mantenimiento)')),
                ('profile_picture', models.ImageField(blank=True, default='profile_pics/default.jpg', upload_to='profile_pics/', verbose_name='Foto de perfil')),
                ('bio', models.TextField(blank=True, max_length=500, verbose_name='Biografía')),
                ('diets', models.ManyToManyField(to='diets.semanaldiet')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
